package controllers;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import models.User;
import utility.DatabaseUtility;

public class Controller {
	
	PreparedStatement pst;
	DatabaseUtility connectNow = new DatabaseUtility();
	Connection connectDB = connectNow.getConnection();
	
    @FXML
    private Button addBtn;
    
    @FXML
    private TextField birth_date;
    
    @FXML
    private TextField txt_id;

    @FXML
    private TableColumn<User, String> dateColumn;

    @FXML
    private Button deleteBtn;

    @FXML
    private TableColumn<User, String> nameColumn;

    @FXML
    private TableColumn<User, String> phoneColumn;
    
    @FXML
    private TableColumn<String, String> idColumn;

    @FXML
    private TextField phone_number;

    @FXML
    private TableColumn<User, String> subjectColumn;

    @FXML
    private TableView<User> table_view;

    @FXML
    private TextField txt_name;

    @FXML
    private TextField txt_subject;

    @FXML
    private Button updateBtn;

    @FXML
    void add(ActionEvent event) {
    	
    	String studentName, subjects, phoneNumber;
    	String birthDate, studentId;
    	
    	studentId = txt_id.getText();
    	studentName = txt_name.getText();
    	birthDate = birth_date.getText();
    	subjects = txt_subject.getText();
    	phoneNumber = phone_number.getText();
    	
    	
    	String addQuery = "INSERT INTO student_details (student_id, student_name, birth_date, subjects, phone_number) VALUES(?, ?, ?, ?, ?)";
    	
    	try {
			pst = connectDB.prepareStatement(addQuery);
			pst.setString(1, );
			pst.setString(1, studentName);
			pst.setString(2, birthDate.toString());
			pst.setString(3, subjects);
			pst.setString(4, phoneNumber);
			pst.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
    	
    }

    @FXML
    void delete(ActionEvent event) {

    }

    @FXML
    void update(ActionEvent event) {

    }
    
    public void table_view() {
    		ObservableList<User> users = FXCollections.observableArrayList();
    		
    		try {
				pst = connectDB.prepareStatement("SELECT student_id, student_name, birth_date, subjects, phone_number FROM student_details");
				ResultSet rs = pst.executeQuery();
				
				while(rs.next()) {
					User user = new User();
					user.setStudentID(rs.getString("student_id"));
					user.setStudentName(rs.getString("student_name"));
					user.setBirthDate(rs.getString("birth_date"));
					user.setSubject(rs.getString("subjects"));
					user.setPhoneNumber(rs.getString("phone_number"));
					users.add(user);
				}
				
				table_view.setItems(users);
				idColumn.setCellValueFactory(f -> f.getValue().);
				nameColumn.setCellValueFactory(f -> f.getValue().studentNameProperty());
				dateColumn.setCellValueFactory(f -> f.getValue().studentIDProperty());
				subjectColumn.setCellValueFactory(f -> f.getValue().subjetProperty());
				phoneColumn.setCellValueFactory(f -> f.getValue().phoneNumberProperty());
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    }

}